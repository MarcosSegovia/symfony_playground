<?php

namespace EduBundle\Infrastructure\Repository\Doctrine\User;

use Doctrine\ORM\EntityManager;
use EduBundle\Domain\Infrastructure\Repository\User\UserRepository as UserRepositoryContract;
use EduBundle\Domain\Model\User\Email;
use EduBundle\Domain\Model\User\User;
use EduBundle\Domain\Model\User\UserId;
use EduBundle\Entity\User as DoctrineUserEntity;
use EduBundle\Repository\UserRepository as DoctrineUserRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository implements UserRepositoryContract
{
    /** @var EntityManager */
    private $entity_manager;

    /** @var DoctrineUserRepository */
    private $repository;

    public function __construct(EntityManager $an_entity_manager)
    {
        $this->entity_manager = $an_entity_manager;
        $this->repository = $this->entity_manager->getRepository(DoctrineUserEntity::class);
    }

    public function find(UserId $a_user_id)
    {
        $user_id = $a_user_id->userId();
        $result  = $this->repository->find($user_id);

        return $this->hydrateItem($result);
    }

    public function findAll()
    {
        $results = $this->repository->findAll();

        return $this->hydrateItems($results);
    }

    public function persist(User $a_user)
    {
        $user_id = $a_user->idUser()->userId();
        $user    = $this->repository->find($user_id);

        if (null === $user)
        {
            $user = new DoctrineUserEntity();
        }

        $user->setIdUser((string) $a_user->idUser()->userId());
        $user->setEmail((string) $a_user->email()->email());
        $user->setName($a_user->name());

        $this->entity_manager->persist($user);
        $this->flush();
    }

    public function remove(UserId $a_user_id, $flush = true)
    {
        $user_id = $a_user_id->userId();
        $user    = $this->repository->find($user_id);

        if (null === $user)
        {
            return;
        }

        $this->entity_manager->remove($user);
        $this->flush();
    }

    public function flush()
    {
        $this->entity_manager->flush();
    }


    /**
     *
     *
     * @param array $results
     *
     * @return array
     */
    private function hydrateItems(array $results)
    {
        $users = [];
        foreach ($results as $result)
        {
            $user = $this->hydrateItem($result);
            array_push($users, $user);
        }

        return $users;
    }

    private function hydrateItem(array $result)
    {
        $user = new User(new UserId($result['id_user']), $result['name'], new Email($result['email']));

        return $user;
    }
}
